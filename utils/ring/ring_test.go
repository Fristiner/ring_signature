package ring

import (
	"crypto/rand"
	"crypto/rsa"
	"fmt"
	"testing"
)

func TestRing(t *testing.T) {
	var key []*rsa.PrivateKey
	var pubkeys []*rsa.PublicKey
	size := 4
	msg1 := "this is a test message!"
	msg2 := "this is another test message!"
	for i := 0; i < size; i++ {
		generateKey, _ := rsa.GenerateKey(rand.Reader, 1024)
		key = append(key, generateKey)
		pubkeys = append(pubkeys, &generateKey.PublicKey)
	}
	// SignWrapper传入组成员的个数，签名者在组中的位置（0开头），消息，组成员的公钥，签名者的私钥
	signresult1 := SignWrapper(size, 0, msg1, pubkeys, key[0])
	// 将数据的值存放在缓存中
	fmt.Println(signresult1)

	signresult2 := SignWrapper(size, 1, msg2, pubkeys, key[1])
	// VerifyWrapper传入消息，组成员的公钥
	fmt.Println("msg1 for sign1::", VerifyWrapper(msg1, pubkeys, signresult1))
	fmt.Println("msg2 for sign2::", VerifyWrapper(msg2, pubkeys, signresult2))
	fmt.Println("msg2 for sign2(change order)::", VerifyWrapper(msg2, append(pubkeys[2:], pubkeys[:2]...), signresult2))
	fmt.Println("msg1 for sign2(change msg)::", VerifyWrapper(msg1, pubkeys, signresult2))
	// fmt.Println(signresult1)

	generateKey, _ := rsa.GenerateKey(rand.Reader, 1024)
	key = append(key, generateKey)
	pubkeys = append(pubkeys, &generateKey.PublicKey)
	// 增加一个新的公钥
	fmt.Println(len(pubkeys))
	sign3 := SignWrapper(5, 4, msg1, pubkeys, generateKey)

	fmt.Println("   ", VerifyWrapper(msg1, pubkeys, sign3))
	// fmt.Println("   ", VerifyWrapper(msg1, pubkeys, sign3))

}

func TestName(t *testing.T) {
	var key []*rsa.PrivateKey
	var pubkeys []*rsa.PublicKey
	size := 4
	msg1 := "this is a test message!"
	// msg2 := "this is another test message!"
	for i := 0; i < size; i++ {
		generateKey, _ := rsa.GenerateKey(rand.Reader, 1024)
		key = append(key, generateKey)
		pubkeys = append(pubkeys, &generateKey.PublicKey)
	}
	// SignWrapper传入组成员的个数，签名者在组中的位置（0开头），消息，组成员的公钥，签名者的私钥
	signresult1 := SignWrapper(size, 0, msg1, pubkeys, key[0])
	fmt.Println(signresult1)
	fmt.Println(len(signresult1))

	// 94969371297898286128881047387187700146262471711057015278940173723870065574880
	// 153537793791142911053220499525336994528222046795881110831087520243637242171904355608928080221650627234838045368487334663481562922346394501725829353359166033661517833475089554800834895381343149319136355347270148793896163541349647570691149727682024745479915973296869606209411881196815569804142129621794447893046
	// 37594980629432289725189494166004408509876829614785916653931022424390865879881079320045005023620567956835799681875658073120195090550263427512271492302396563196683931197832507438746813671005987331376594313853733251574626405852593250023043960033738515800759533359580047340151642834613348879381023420999114717176
	// 63327461506308993447479176422741320885699138145531204124711034749577065101125594645869477193040778712702114577244002733800598308875106657555363286708398686620351225412362238269073361723472612784621408924864711374965649704095978442689504630782936620898615769027745685871810708318010512147967785180119063567277
	// 82073447575501832221799230741293150766956410620062486343008793569778587437961576513100719451274830829965307747865104415513077417637303563627237559543942889158911162825959882794602526738804507561972776177069728190506332585094108189060527076693864519969950584388729786861766363700420670854491602781077816493070

	//
	// 16884309722714658437644070534847734923038431467040687200036134869066517080869
	// 107205721674357237100949306021036076921484256545120852827351397986522288933181981948512274438531161378033621192287380225138477452433630769780251000675009896517226278414662054877529163595296837495417963011835521787484272636845041149317719670081987611959150340936366655934406227150675039197305550656612310089090
	// 84817289158087520639980675700087967276676532665705783042052086145549904624128793613248848777610121428696882656001364318092237873018738477475157745237241477283907099349521103924512977290934566507955998330801627645558244642001258614921308282571832443653100141000703133418475598617514106501441586212153111217319
	// 123789700336735081044850581039237766129823419550834503010130148324791144978801085683364703800885581000001521580848531336576669731893910623060538332440142295580773469688623384817833190299559041822622896426794828816774660172258362692601529681818669790806603031657912451642473520035984674131974418392222891598908
	// 176219400169979001242236178430079258087447724385923105667093726510270559871494012024280814537725019931466855730617829705999963282754106352916274761662284753606135937174311841756403571435320296710944438014417449201132234517418320259849742389957736733781946760371969555050922065309117524666496617611440007256151]

	// fmt.Println(len(signresult1[1:2]))

	signature := EncodeSignature(signresult1)
	fmt.Println("----------------------")
	fmt.Println(signature)

	ss, _ := DecodeSignature(signature)
	fmt.Println("msg1 for sign1::", VerifyWrapper(msg1, pubkeys, ss))
	// signature3, err := DecodeSignature3(string1)
	// if err != nil {
	// 	fmt.Println(err)
	//
	// }
	//
	// fmt.Println(signature3)
	//
	// fmt.Println("-----------------------------")

	// fmt.Println("msg1 for sign1::", VerifyWrapper(msg1, pubkeys, signature3))

	// fmt.Println(string1)
	// signature, _ := DecodeSignature2(string1)
	// fmt.Println("msg1 for sign1::", VerifyWrapper(msg1, pubkeys, signature3))
}
